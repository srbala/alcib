def performMock(String hypervisor) {
    return {
        sh "python3 -u main.py --stage mock "
    }
}
pipeline {
  agent {
    label 'arm64-builder02'
  }
  parameters {
      choice(name: 'OS_MAJOR_VER', choices: ['8', '9'], description: 'AlmaLinux Major Version')
      string(name: 'BUCKET', defaultValue: 'alcib', description: 'S3 BUCKET NAME')
      string(name: 'STAGING_PATH', defaultValue: '/staging/path', description: 'File for path for staging')
      booleanParam(defaultValue: true, description: 'Prompt Admin for Release', name: 'RELEASE')
  }
  environment {
      AWS_ACCESS_KEY_ID = credentials('jenkins-aws-access-key-id')
      AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
      VAGRANT_CLOUD_ACCESS_KEY = credentials('jenkins-vagrant-user-access-key')
      SSH_KEY_FILE = credentials('jenkins-aclib-ssh-private-key')
      WINDOWS_CREDS = credentials('jenkins-windows-creds')
      OS_MAJOR_VER = "${params.OS_MAJOR_VER}"
      SIGN_JWT_TOKEN = credentials('sign_jwt_token')
  }

  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  stages {
    stage('Prepare Workspace') {
        steps {
            // Clean before build
            cleanWs()
            // We need to explicitly checkout from SCM here
            checkout scm
            sh'''
            sha256sum Jenkins* >  CHECKSUMS
            ls -al > folder.log
            '''
//            pip3 install --user boto3 paramiko
            echo "Building ${env.JOB_NAME}..."
        }
    } 
    stage('Testing for Mock') {
        steps {
            script {
                def jobs = [:]
                //for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                    jobs["hv"] = performMock("hv")
                //}
                parallel jobs
            }
        }
    }
  }

  post {
      always {
          archiveArtifacts artifacts: '*.log'
      }
      success {
        echo "Job Success ..."
        //   slackSend channel: '#albs-jenkins-notifications',
        //             color: 'good',
        //             message: "The build ${currentBuild.fullDisplayName} completed successfully : ${currentBuild.absoluteUrl}"
      }
      failure {
        echo "Job Failed ..."
        //   slackSend channel: '#albs-jenkins-action-required',
        //             color: 'danger',
        //             message: "The build ${currentBuild.fullDisplayName} failed : ${currentBuild.absoluteUrl}"
      }
      aborted {
        echo "Job Aborted ..."
        //   slackSend channel: '#albs-jenkins-action-required',
        //             color: 'warning',
        //             message: "The build ${currentBuild.fullDisplayName} was aborted : ${currentBuild.absoluteUrl}"
        }
      }
  }
